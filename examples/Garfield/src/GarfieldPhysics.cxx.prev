#include "GarfieldPhysics.h"

#include "TGeoManager.h"
#include "TGDMLParse.h"
#include "TGeoBBox.h"

using namespace std;

GarfieldPhysics* GarfieldPhysics::fGarfieldPhysics = 0;
//....oooOO0OOooo........oooOO0OOooo........oooOO0OOooo........oooOO0OOooo....

GarfieldPhysics* GarfieldPhysics::GetInstance() {
	if (!fGarfieldPhysics) {
     	cout << "Instance has to be created " << fGarfieldPhysics << endl;
		fGarfieldPhysics = new GarfieldPhysics();
	}
	cout << "Get instance returns " << fGarfieldPhysics << endl;
	return fGarfieldPhysics;
}

void GarfieldPhysics::Dispose() {
	delete fGarfieldPhysics;
	fGarfieldPhysics = 0;
}

GarfieldPhysics::GarfieldPhysics() {
	fMapParticlesEnergy = new MapParticlesEnergy();
	fSecondaryElectrons = new std::vector<GarfieldElectron*>();
	fMediumMagboltz = 0;
	fSensor = 0;
	fAvalalancheMC = 0;
	fComponentAnalyticField = 0;
	fTrackHeed = 0;
	fTrackSimple = 0;
	fGeoManager = 0;
	fGeometryRoot = 0;
	fGeometrySimple = 0;
	fTube = 0;
	createSecondariesInGeant4 = false;

	cout << "new GarfieldPhysics::GarfieldPhysics " << this << endl;
}

GarfieldPhysics::~GarfieldPhysics() {
	delete fMapParticlesEnergy;
	DeleteSecondaryElectrons();
	delete fSecondaryElectrons;
	delete fMediumMagboltz;
	delete fSensor;
	delete fAvalalancheMC;
	delete fComponentAnalyticField;
	delete fTrackHeed;
	delete fTrackSimple;
	delete fGeometryRoot;
	delete fGeometrySimple;

	std::cout << "Deconstructor GarfieldPhysics" << std::endl;
}

void GarfieldPhysics::AddParticleName(const std::string particleName,
		double ekin_min_keV, double ekin_max_keV) {
	if (ekin_min_keV >= ekin_max_keV) {
		std::cout << "Ekin_min=" << ekin_min_keV
				<< " keV is larger than Ekin_max=" << ekin_max_keV << " keV"
				<< std::endl;
		return;
	}
	std::cout << "Garfield model is applicable for G4Particle " << particleName
			<< " between " << ekin_min_keV << " keV and " << ekin_max_keV
			<< " keV" << std::endl;
	fMapParticlesEnergy->insert(
			std::make_pair(particleName,
					std::make_pair(ekin_min_keV, ekin_max_keV)));

}

bool GarfieldPhysics::FindParticleName(std::string name) {
	std::cout << "GarfieldPhysics::FindParticleName " << name << " " << this << std::endl;
	std::cout << fMapParticlesEnergy <<  std::endl;
	std::cout << fMapParticlesEnergy->size() <<  std::endl;
	MapParticlesEnergy::iterator it;
	it = fMapParticlesEnergy->find(name);
	if (it != fMapParticlesEnergy->end()) {
		std::cout << "found" << std::endl;
		return true;
	}
    std::cout << "not found" << std::endl;
	return false;
}

bool GarfieldPhysics::FindParticleNameEnergy(std::string name,
		double ekin_keV) {
	MapParticlesEnergy::iterator it;
	it = fMapParticlesEnergy->find(name);
	if (it != fMapParticlesEnergy->end()) {
		EnergyRange_keV range = it->second;
		if (range.first <= ekin_keV && range.second >= ekin_keV) {
			return true;
		}
	}
	return false;
}

void GarfieldPhysics::InitializePhysics() {

	fMediumMagboltz = new Garfield::MediumMagboltz();

	fMediumMagboltz->SetComposition("ar", 70., "co2", 30.);
	fMediumMagboltz->SetTemperature(293.15);
	fMediumMagboltz->SetPressure(3 * 760.);
	fMediumMagboltz->EnableDebugging();
	fMediumMagboltz->Initialise(true);
	fMediumMagboltz->DisableDebugging();
	// Set the Penning transfer efficiency.
	const double rPenning = 0.57;
	const double lambdaPenning = 0.;
	fMediumMagboltz->EnablePenningTransfer(rPenning, lambdaPenning, "ar");
	// Load the ion mobilities.
	fMediumMagboltz->LoadIonMobility("IonMobility_Ar+_Ar.txt");
	fMediumMagboltz->LoadGasFile("ar_70_co2_30.gas");

	fSensor = new Garfield::Sensor();
	fAvalalancheMC = new Garfield::AvalancheMC();
	fComponentAnalyticField = new Garfield::ComponentAnalyticField();

	CreateGeometry();

	fAvalalancheMC->SetSensor(fSensor);
	fAvalalancheMC->EnableSignalCalculation();
	//5ps time steps
	fAvalalancheMC->SetTimeSteps(0.05);

	const double tMin = 0.;
	const double tMax = 2.;
	const double tStep = 0.02;
	const int nTimeBins = int((tMax - tMin) / tStep);
	fSensor->SetTimeWindow(0., tStep, nTimeBins);

	fTrackSimple = new Garfield::TrackSimple();
	fTrackSimple->SetSensor(fSensor);

	fTrackHeed = new Garfield::TrackHeed();
	fTrackHeed->SetSensor(fSensor);

	fTrackHeed->EnableDeltaElectronTransport();
	//fTrackHeed->DisableDeltaElectronTransport();

	//CreateGeometryFromGDML("Tube.gdml", "ArCO2");

}

void GarfieldPhysics::CreateGeometry() {
	// Wire radius [cm]
	const double rWire = 25.e-4;
	// Outer radius of the tube [cm]
	const double rTube = 1.45;
	// Half-length of the tube [cm]
	const double lTube = 10.;

	fGeometrySimple = new Garfield::GeometrySimple();
	// Make a tube (centered at the origin, inner radius: 0, outer radius: rTube).
	fTube = new Garfield::SolidTube(0., 0., 0, 0, rTube, lTube);
	// Add the solid to the geometry, together with the medium inside.
	fGeometrySimple->AddSolid(fTube, fMediumMagboltz);
	fComponentAnalyticField->SetGeometry(fGeometrySimple);

	// Voltages
	const double vWire = 3270.;
	const double vTube = 0.;
	// Add the wire in the center.
	fComponentAnalyticField->AddWire(0., 0., 2 * rWire, vWire, "w");
	// Add the tube.
	fComponentAnalyticField->AddTube(rTube, vTube, 0, "t");
	// Calculate signal induced on wire
	fComponentAnalyticField->AddReadout("w");

	fSensor->AddComponent(fComponentAnalyticField);
	fSensor->AddElectrode(fComponentAnalyticField, "w");

}

void GarfieldPhysics::DoIt(std::string particleName, double ekin_keV,
		double time, double x_cm, double y_cm, double z_cm, double dx,
		double dy, double dz) {

	DeleteSecondaryElectrons();

	double eKin_eV = ekin_keV * 1000;

	double xc = 0., yc = 0., zc = 0., tc = 0.;
	// Number of electrons produced in a collision
	int nc = 0;
	// Energy loss in a collision
	double ec = 0.;
	// Dummy variable (not used at present)
	double extra = 0.;
	// Total energy loss along the track
	double esum = 0.;
	// Total number of electrons produced along the track
	int nsum = 0;

	fEnergyDeposit = 0;

	fTrackSimple->SetParticle(particleName);
	fTrackSimple->SetKineticEnergy(eKin_eV);
	fTrackSimple->NewTrack(x_cm, y_cm, z_cm, time, dx, dy, dz);

	while (fTrackSimple->GetCluster(xc, yc, zc, tc, nc, ec, extra)) {
		esum += ec;
	}
	fEnergyDeposit = esum;



	fTrackHeed->SetParticle(particleName);
	fTrackHeed->SetKineticEnergy(eKin_eV);
	fTrackHeed->NewTrack(x_cm, y_cm, z_cm, time, dx, dy, dz);

	esum = 0;
	while (fTrackHeed->GetCluster(xc, yc, zc, tc, nc, ec, extra)) {
		esum += ec;

		if (createSecondariesInGeant4) {
			for (int i = 0; i < nc; ++i) {
				double xe, ye, ze, te;
				double ee, dxe, dye, dze;
				fTrackHeed->GetElectron(i, xe, ye, ze, te, ee, dxe, dye, dze);

				double newTime = te;
				if (newTime < time) {
					newTime += time;
				}
				fSecondaryElectrons->push_back(
						new GarfieldElectron(ee, newTime, xe, ye, ze, dxe, dye,
								dze));
			}

		}

	}
	std::cout << "Edep gas TrackSimple: " << fEnergyDeposit/1000 << " keV" << std::endl;
	std::cout << "Edep gas TrackHeed: " << esum/1000 << " keV" << std::endl;

}

std::vector<GarfieldElectron*>* GarfieldPhysics::GetSecondaryElectrons() {
	return fSecondaryElectrons;
}

void GarfieldPhysics::DeleteSecondaryElectrons() {
	if (!fSecondaryElectrons->empty()) {
		fSecondaryElectrons->erase(fSecondaryElectrons->begin(),
				fSecondaryElectrons->end());
	}
}

